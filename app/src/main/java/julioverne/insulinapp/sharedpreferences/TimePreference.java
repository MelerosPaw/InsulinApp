package julioverne.insulinapp.sharedpreferences;import android.content.Context;import android.content.SharedPreferences;import android.os.Bundle;import android.preference.EditTextPreference;import android.text.TextUtils;import android.util.AttributeSet;import android.view.View;import android.widget.EditText;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import androidx.core.content.ContextCompat;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.Unbinder;import julioverne.insulinapp.R;import julioverne.insulinapp.data.DataManager;import julioverne.insulinapp.data.SharedPreferencesManager;import julioverne.insulinapp.utils.StringUtils;import julioverne.insulinapp.utils.TimeUtils;import static android.view.View.GONE;/** * Created by Juan José Melero on 01/06/2015. */public class TimePreference extends EditTextPreference {    @BindView(R.id.tv_titulo)    TextView tvTitulo;    @BindView(R.id.tv_summary)    TextView tvSummary;    @BindView(R.id.rl_valor_actual)    RelativeLayout rlValorActual;    @BindView(R.id.tv_valor_actual)    TextView tvValorActual;    private EditText etHoras;    private EditText etMinutos;    private TextView tvMessage;    private boolean previoAlmacenado = false;    private DataManager dataManager;    private Unbinder unbinder;    public TimePreference(Context context) {        super(context);        initialize(context);    }    public TimePreference(Context context, AttributeSet attrs) {        super(context, attrs);        initialize(context);    }    public TimePreference(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        initialize(context);    }    public void initialize(Context context) {        dataManager = DataManager.getInstance(context);    }    /* Configuración de los controles del ítem de la preferencia. */    @Override    protected void onBindView(View view) {        setPersistent(false);        super.onBindView(view);        unbinder = ButterKnife.bind(this, view);        loadView();    }    public void loadView() {        tvTitulo.setText(getTitle());        tvSummary.setText(getSummary());        activarCampos();        actualizarValorMostrado();    }    public void actualizarValorMostrado() {        String horas, minutos;        switch (getKey()) {            case SharedPreferencesManager.DURACION_INSULINA:                horas = dataManager.getPreferencia(SharedPreferencesManager.DURACION_HORAS);                minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.DURACION_MINUTOS));                break;            case SharedPreferencesManager.BACKUP_TIEMPO:                horas = dataManager.getPreferencia(SharedPreferencesManager.BACKUP_HORAS);                minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.BACKUP_MINUTOS));                break;            default:                horas = "";                minutos = "";        }        String valorActual = horas + ":" + minutos;        if (!":".equals(valorActual)) {            previoAlmacenado = true;            valorActual += " horas";            if (tvValorActual != null && rlValorActual != null) {                tvValorActual.setText(valorActual);                rlValorActual.setVisibility(View.VISIBLE);            }        } else {            if (rlValorActual != null) {                rlValorActual.setVisibility(GONE);            }        }    }    /* Cambia los botones de aceptar y cancelar del dialog. */    @Override    protected void showDialog(Bundle state) {        setPositiveButtonText(R.string.dialog_aceptar);        setNegativeButtonText(R.string.cancelar);        super.showDialog(state);    }    /* Gestiona las vistas del nuestro Dialog personalizado. */    @Override    protected void onBindDialogView(View view) {        super.onBindDialogView(view);        etHoras = (EditText) view.findViewById(R.id.et_horas);        etMinutos = (EditText) view.findViewById(R.id.et_minutos);        tvMessage = (TextView) view.findViewById(R.id.tv_message);        tvMessage.setText(getDialogMessage());        if (previoAlmacenado) {            String horas, minutos;            switch (getKey()) {                case SharedPreferencesManager.DURACION_INSULINA:                    horas = dataManager.getPreferencia(SharedPreferencesManager.DURACION_HORAS);                    minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.DURACION_MINUTOS));                    break;                case SharedPreferencesManager.BACKUP_TIEMPO:                    horas = dataManager.getPreferencia(SharedPreferencesManager.BACKUP_HORAS);                    minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.BACKUP_MINUTOS));                    break;                default:                    horas = "";                    minutos = "";            }            etHoras.setText(horas);            etMinutos.setText(minutos);        }    }    // Cuando el usuario responda, si no se asigna un valor correcto, no se guarda el valor y    // se le informa con un Toast.    @Override    protected void onDialogClosed(boolean positiveResult) {        boolean correcto;        if (!positiveResult) {            correcto = false;        } else if (etHoras.getText().toString().equals("")) {            Toast.makeText(getContext(), "No has introducido las horas", Toast.LENGTH_LONG).show();            correcto = false;        } else if (etMinutos.getText().toString().equals("")) {            Toast.makeText(getContext(), "No has introducido los minutos", Toast.LENGTH_LONG).show();            correcto = false;        } else {            correcto = true;        }        String horas = etHoras.getText().toString();        String minutos = TimeUtils.ceroCero(etMinutos.getText().toString());        if (correcto) {            // Comprueba que los minutos sean un número menor que 60            if (StringUtils.getInteger(minutos) > 59) {                StringUtils.toastLargo(getContext(), "Los minutos no pueden ser más de 59");                correcto = false;            }            // Si la preferencia es la hora de la copia de seguridad, comprueba que la hora sea            // también válida            if (getKey().equals(SharedPreferencesManager.BACKUP_TIEMPO)) {                if (StringUtils.getInteger(horas) > 23) {                    StringUtils.toastLargo(getContext(), "La hora no puede ser mayor de 23");                    correcto = false;                }            }        }        if (correcto) {            switch (getKey()) {                case SharedPreferencesManager.DURACION_INSULINA:                    dataManager.setPreference(SharedPreferencesManager.DURACION_HORAS, horas);                    dataManager.setPreference(SharedPreferencesManager.DURACION_MINUTOS, minutos);                    break;                case SharedPreferencesManager.BACKUP_TIEMPO:                    dataManager.setPreference(SharedPreferencesManager.BACKUP_HORAS, horas);                    dataManager.setPreference(SharedPreferencesManager.BACKUP_MINUTOS, minutos);            }            //Si no son cantidades correctas, no se guarda, y se restablecen los EditText del Dialog        } else {            switch (getKey()) {                case SharedPreferencesManager.DURACION_INSULINA:                    horas = dataManager.getPreferencia(SharedPreferencesManager.DURACION_HORAS);                    minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.DURACION_MINUTOS));                    break;                case SharedPreferencesManager.BACKUP_TIEMPO:                    horas = dataManager.getPreferencia(SharedPreferencesManager.BACKUP_HORAS);                    minutos = TimeUtils.ceroCero(dataManager.getPreferencia(SharedPreferencesManager.BACKUP_MINUTOS));                    break;            }            if (!TextUtils.isEmpty(horas) && !TextUtils.isEmpty(minutos)) {                etHoras.setText(horas);                etMinutos.setText(minutos);            } else {                etHoras.setText("");                etMinutos.setText("");            }        }        super.onDialogClosed(positiveResult);    }    @Override    public void setEnabled(boolean enabled) {        super.setEnabled(enabled);        activarCampos();    }    public void activarCampos() {        if (tvTitulo != null) {            if (isEnabled()) {                tvTitulo.setTextColor(ContextCompat.getColor(getContext(), R.color.negro_titulo));            } else {                tvTitulo.setTextColor(ContextCompat.getColor(getContext(), R.color.secondary_text));            }        }    }    @Override    public void setDefaultValue(Object defaultValue) {        if (getKey().equals(SharedPreferencesManager.BACKUP_TIEMPO) && defaultValue == null) {            SharedPreferences sharedPreferences = getSharedPreferences();            sharedPreferences.edit()                .putString(SharedPreferencesManager.BACKUP_HORAS, "3")                .putString(SharedPreferencesManager.BACKUP_MINUTOS, "00")                .apply();            actualizarValorMostrado();        } else {            super.setDefaultValue(defaultValue);        }    }    @Override    public void onActivityDestroy() {        super.onActivityDestroy();        unbinder.unbind();    }}